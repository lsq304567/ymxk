<!DOCTYPE html>
<html>

<head>
  <title>寄生组合式继承</title>
  <script type="text/javascript">
    //原型式继承
    function object(o) {
      function F() {}
      F.prototype = o;
      return new F();
    }
    // 通过借用构造函数来继承属性，通过原型链的混成形式来继承方法
    // 不必为了指定子类型的原型而调用超类型的构造函数，我们所需要的无非就是类型原型的一个副本而已
    // 本质上，就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型

    //实现了寄生组合式继承的最简单形式。这个函数接收两个参数：子类型构造函数和超类型构造函数
    function inheritPrototype(subType, superType) {
      // 第一步是创建超类型原型的一个副本
      var prototype = object(superType.prototype); //创建对象
      // 第二步是为创建的副本添加 constructor 属性，从而弥补因重写原型而失去的默认的 constructor 属性
      prototype.constructor = subType; //增强对象
      // 最后一步，将新创建的对象（即副本）赋值给子类型的原型
      subType.prototype = prototype; //指定对象
      // 用调用 inheritPrototype() 函数的语句，去替换前面例子中为子类型原型赋值的语句
    }
    // 超类型
    function SuperType(name) {
      this.name = name;
      this.colors = ["red", "blue", "green"];
    }
    SuperType.prototype.sayName = function () {
      console.log(this.name);
    };
    // 子类型
    function SubType(name, age) {
      SuperType.call(this, name);
      this.age = age;
    }
    inheritPrototype(SubType, SuperType);
    SubType.prototype.sayAge = function () {
      console.log(this.age);
    };
    //只调用了一次 SuperType 构造函数
    //能够正常使用instanceof 和 isPrototypeOf()
    var instance1 = new SubType("Nicholas", 29);
    instance1.colors.push("black");
    console.log(instance1.colors); //"red,blue,green,black"
    instance1.sayName(); //"Nicholas";
    instance1.sayAge(); //29
    var instance2 = new SubType("Greg", 27);
    console.log(instance2.colors); //"red,blue,green"
    instance2.sayName(); //"Greg";
    instance2.sayAge(); //27
  </script>
</head>

<body>
  <h1>寄生组合式继承</h1>
</body>

</html>